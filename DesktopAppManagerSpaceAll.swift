import Cocoa
import ApplicationServices

/// Desktop App Manager - ÂÖ®„Çπ„Éö„Éº„Çπ„Åã„ÇâSpace 1„Å´„Ç¢„Éó„É™„ÇíÁßªÂãï
class DesktopAppManagerSpaceAll: DesktopAppManagerBase {
    
    // MARK: - Public Methods
    
    /// ÂÖ®„Çπ„Éö„Éº„Çπ„Åã„ÇâSpace 1„Å´„Ç¢„Éó„É™„ÇíÁßªÂãï
    func arrangeAllApps() {
        print("üöÄ Collecting all apps from all spaces to Space 1")
        print("=" * 50)
        
        // „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        guard checkAccessibilityPermission() else {
            print("‚ùå Accessibility permission required")
            print("Please grant permission in:")
            print("System Preferences > Security & Privacy > Privacy > Accessibility")
            requestAccessibilityPermission()
            return
        }
        
        // Â§ñÈÉ®„É¢„Éã„Çø„Éº„ÅÆÊ§úÂá∫
        print("\nüñ•Ô∏è Detecting monitors...")
        let monitors = monitorManager.detectMonitors()
        let hasExternalMonitor = monitors.count > 1
        
        if hasExternalMonitor {
            print("‚úÖ External monitor detected")
            // „É¢„Éã„Çø„ÉºÂÅ¥„ÅÆSpace 2-4„ÇíÂ∑°Âõû„Åó„Å¶„Ç¢„Éó„É™„ÇíÂèéÈõÜ
            collectAppsFromExternalMonitorSpaces()
        } else {
            print("‚ÑπÔ∏è No external monitor detected, collecting from main display spaces only")
            // „É°„Ç§„É≥„Éá„Ç£„Çπ„Éó„É¨„Ç§„ÅÆSpace 1-4„ÇíÂ∑°Âõû
            collectAppsFromMainDisplaySpaces()
        }
        
        // ÊúÄÁµÇÁöÑ„Å´Space 1„Å´Âàá„ÇäÊõø„Åà
        print("\nüìç Final step: Returning to Space 1")
        switchToSpace(1)
        Thread.sleep(forTimeInterval: 1.0)
        
        print("\n‚úÖ All apps have been collected to Space 1!")
        print("üí° Tip: Press Control+1 to verify all apps are on Space 1")

        moveAppsToSpace()
    }

    // MARK: - Private Methods

    /// Space 1„Åã„ÇâSpace 4„Å´„Ç¢„Éó„É™„ÇíÁßªÂãï
    private func moveAppsToSpace() {
        let placement1 = PlacementConfig(
            targetSpace: 1,
            appPlacements: [
                "Slack": .full  // Full screen on main display
            ],
            displayType: .main,
            displayName: "Main Display"
        )
        
        // Then place them
        placeApps(config: placement1)

        let placement2 = PlacementConfig(
            targetSpace: 2,
            appPlacements: [
                "TablePlus": .left,   // Â∑¶ÂçäÂàÜ„Å´ÈÖçÁΩÆ
                "Postman": .right     // Âè≥ÂçäÂàÜ„Å´ÈÖçÁΩÆ
            ],
            displayType: .external,
            displayName: "External Monitor"
        )
        
        // Then place them
        placeApps(config: placement2)

        let placement3 = PlacementConfig(
            targetSpace: 3,
            appPlacements: [
                "iTerm": .left,
                "Cursor": .right,
                "Kiro": .right
            ],
            displayType: .external,
            displayName: "External Monitor"
        )
        
        // Then place them
        placeApps(config: placement3)

        let placement4 = PlacementConfig(
            targetSpace: 4,
            appPlacements: [
                "Google Chrome": .full  // ÂÖ®ÁîªÈù¢Ôºà‰∏≠Â§Æ80%x80%Ôºâ
            ],
            displayType: .external,
            displayName: "External Monitor"
        )
        
        // Then place them
        placeApps(config: placement4)
    }
    
    /// Â§ñÈÉ®„É¢„Éã„Çø„Éº„ÅÆSpace 2-4„Åã„Çâ„Ç¢„Éó„É™„ÇíÂèéÈõÜ
    private func collectAppsFromExternalMonitorSpaces() {
        print("\nüì± Collecting apps from external monitor spaces...")
        
        // Â§ñÈÉ®„É¢„Éã„Çø„Éº„ÇíÂèñÂæó
        let monitors = monitorManager.detectMonitors()
        guard let externalMonitor = monitors.first(where: { !$0.isMain }) else {
            print("‚ö†Ô∏è Could not identify external monitor")
            return
        }
        
        // Space 2-4„ÇíÂ∑°ÂõûÔºàÂ§ñÈÉ®„É¢„Éã„Çø„ÉºÂÅ¥Ôºâ
        for spaceNumber in 2...4 {
            print("\n[Space \(spaceNumber)] Checking external monitor...")
            
            // Â§ñÈÉ®„É¢„Éã„Çø„Éº„ÅÆ„Çπ„Éö„Éº„Çπ„Å´ÁßªÂãï
            moveMouseToExternalMonitor(externalMonitor)
            Thread.sleep(forTimeInterval: 0.3)
            switchToSpace(spaceNumber)
            Thread.sleep(forTimeInterval: 1.0)
            
            // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç¢„Éó„É™„ÇíÂèñÂæó„Åó„Å¶ Space 1 „Å´ÁßªÂãï
            moveActiveAppsToSpace1FromCurrentSpace(spaceNumber: spaceNumber, isExternal: true)
        }
        
        // „É°„Ç§„É≥„Éá„Ç£„Çπ„Éó„É¨„Ç§„ÅÆSpace 2-4„ÇÇ„ÉÅ„Çß„ÉÉ„ÇØ
        print("\nüì± Checking main display spaces...")
        for spaceNumber in 2...4 {
            print("\n[Space \(spaceNumber)] Checking main display...")
            switchToSpace(spaceNumber)
            Thread.sleep(forTimeInterval: 1.0)
            
            // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç¢„Éó„É™„ÇíÂèñÂæó„Åó„Å¶ Space 1 „Å´ÁßªÂãï
            moveActiveAppsToSpace1FromCurrentSpace(spaceNumber: spaceNumber, isExternal: false)
        }
    }
    
    /// „É°„Ç§„É≥„Éá„Ç£„Çπ„Éó„É¨„Ç§„ÅÆSpace 1-4„Åã„Çâ„Ç¢„Éó„É™„ÇíÂèéÈõÜ
    private func collectAppsFromMainDisplaySpaces() {
        print("\nüì± Collecting apps from main display spaces...")
        
        // Space 2-4„ÇíÂ∑°ÂõûÔºàSpace 1„ÅØÊó¢„Å´ÂèéÈõÜÂÖà„Å™„ÅÆ„Åß„Çπ„Ç≠„ÉÉ„ÉóÔºâ
        for spaceNumber in 2...4 {
            print("\n[Space \(spaceNumber)] Checking...")
            switchToSpace(spaceNumber)
            Thread.sleep(forTimeInterval: 1.0)
            
            // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç¢„Éó„É™„ÇíÂèñÂæó„Åó„Å¶ Space 1 „Å´ÁßªÂãï
            moveActiveAppsToSpace1FromCurrentSpace(spaceNumber: spaceNumber, isExternal: false)
        }
    }
    
    /// ÁèæÂú®„ÅÆ„Çπ„Éö„Éº„Çπ„Åã„Çâ„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Ç¢„Éó„É™„ÇíSpace 1„Å´ÁßªÂãï
    private func moveActiveAppsToSpace1FromCurrentSpace(spaceNumber: Int, isExternal: Bool) {
        let activeApps = getAllActiveAppNames()
        
        if activeApps.isEmpty {
            print("  ‚Üí No active apps found in Space \(spaceNumber)\(isExternal ? " (external)" : "")")
            return
        }
        
        print("  ‚Üí Found \(activeApps.count) active app(s) in Space \(spaceNumber)\(isExternal ? " (external)" : "")")
        for appName in activeApps {
            print("    ‚Ä¢ \(appName)")
        }
        
        // Space 1„Å´ÁßªÂãï
        print("  ‚Üí Moving apps to Space 1...")
        switchToSpace(1)
        Thread.sleep(forTimeInterval: 0.8)
        
        // ÂêÑ„Ç¢„Éó„É™„Çí„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ„Åó„Å¶ Space 1 „Å´Âõ∫ÂÆö
        for appName in activeApps {
            if let app = NSWorkspace.shared.runningApplications.first(where: { $0.localizedName == appName }) {
                activateApp(app)
                Thread.sleep(forTimeInterval: 0.3)
                
                // „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÂ∞ë„Åó„Åö„Å§„Ç™„Éï„Çª„ÉÉ„Éà„Åó„Å¶ÈÖçÁΩÆ
                let windows = getAllAppWindows(app)
                for (index, window) in windows.enumerated() {
                    let offset = CGFloat(index * 30)
                    positionWindowAt(window, 
                                   x: 100 + offset, 
                                   y: 100 + offset, 
                                   width: 1200, 
                                   height: 800)
                }
                
                print("    ‚úì Moved \(appName) to Space 1")
            }
        }
    }
    
    // MARK: - Private Methods
    
    /// ÂÖ®„Å¶„ÅÆÂÆüË°å‰∏≠„Ç¢„Éó„É™„ÅÆÂêçÂâç„ÇíÂèñÂæó
    private func getAllActiveAppNames() -> [String] {
        let workspace = NSWorkspace.shared
        let allApps = workspace.runningApplications
        
        // „Ç∑„Çπ„ÉÜ„É†„Ç¢„Éó„É™„ÇÑ„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Ç¢„Éó„É™„ÇíÈô§Â§ñ„Åó„Å¶„Ç¢„Éó„É™Âêç„ÇíÂèñÂæó
        let userAppNames = allApps.compactMap { app -> String? in
            guard let bundleId = app.bundleIdentifier,
                  let appName = app.localizedName else { return nil }
            
            // „Ç∑„Çπ„ÉÜ„É†„Ç¢„Éó„É™„ÇíÈô§Â§ñ
            let systemApps = [
                "com.apple.finder",
                "com.apple.dock",
                "com.apple.systemuiserver",
                "com.apple.controlcenter",
                "com.apple.notificationcenterui",
                "com.apple.WindowManager",
                "com.apple.loginwindow",
                "com.apple.spotlight",
                "com.apple.Safari.SocialHelper",
                "com.apple.Safari.History",
                "com.apple.Safari.GeolocationService"
            ]
            
            if systemApps.contains(bundleId) {
                return nil
            }
            
            // „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÊåÅ„Å§„Ç¢„Éó„É™„ÅÆ„Åø„ÇíÂØæË±°
            if app.activationPolicy == .regular && hasVisibleWindows(app) {
                return appName
            }
            
            return nil
        }
        
        return userAppNames
    }
    
    /// „Ç¢„Éó„É™„ÅåÂèØË¶ñ„Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÊåÅ„Å£„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    private func hasVisibleWindows(_ app: NSRunningApplication) -> Bool {
        let pid = app.processIdentifier
        let appElement = AXUIElementCreateApplication(pid)
        
        var windowsValue: CFTypeRef?
        if AXUIElementCopyAttributeValue(appElement, kAXWindowsAttribute as CFString, &windowsValue) == .success,
           let windows = windowsValue as? [AXUIElement],
           !windows.isEmpty {
            
            // ÊúÄÂ∞èÂåñ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Ç¶„Ç£„É≥„Éâ„Ç¶„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            for window in windows {
                var minimized: CFTypeRef?
                if AXUIElementCopyAttributeValue(window, kAXMinimizedAttribute as CFString, &minimized) == .success,
                   let isMinimized = minimized as? Bool,
                   !isMinimized {
                    return true
                }
            }
        }
        
        return false
    }
}
